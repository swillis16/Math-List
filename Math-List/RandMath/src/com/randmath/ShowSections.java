package com.randmath;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.ListView;
import android.widget.TextView;

//This activity will create listview from the topics within the math area selected.
public class ShowSections extends Activity{
	@Override
	   public void onCreate(Bundle savedInstanceState) {
	       super.onCreate(savedInstanceState);
	       
	       //Retrieving bundle from RandMathActivity
	       final Bundle bundle = this.getIntent().getExtras();
	       String category = bundle.getString("areaName");
	       
	        //Storing result of parseFile function into document
	        Document problemFile = parseFile();
	       
	        //Getting root element of document
	        Element docElem = problemFile.getDocumentElement();
	        
	        //Displaying category list
	        List <String> topicList = getTopicsList(docElem,category);
	        
	        setContentView(R.layout.topics);
	        
	        //Initializing ListView
	        final ListView sections = (ListView)findViewById(R.id.listView2);
	        
	        //Creating TextView for category list header
	        TextView header = new TextView(this);
	        header.setText(getString(R.string.topicHelp));
	        header.setBackgroundResource(R.color.blue4);
	        
	        //Creating Header for ListView
	        sections.addHeaderView(header,null,false);
	        
	        // Updating ListView using category List.
	        ArrayAdapter <String>listAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, topicList);
	        
	        //Setting adapter used for sections.
	        sections.setAdapter(listAdapter);
	        
	        //Whenever a list item is pressed, a new activity will run to show the sections of the category chosen.	        
	        sections.setOnItemClickListener(new AdapterView.OnItemClickListener() {
	            public void onItemClick(AdapterView<?> parent, View view,
	                    int position, long id) {
	            	
	            	//Getting text from listview item that was clicked
	            	String clickedSection = (String)sections.getAdapter().getItem(position);
	            	
	            	//Adding category name string to bundle created earlier.
	            	bundle.putString("topicName", clickedSection);

	                Intent newActivity = new Intent(view.getContext(),ShowProblem.class);  
	                newActivity.putExtras(bundle);
	                startActivity(newActivity);

	                }
	              });
	        
	   }
	
	//Function to display topics contained in XML file. This function will use the string given to 
	//search the nodeList generated by getElementsByTagName("area") to find a categoryName that matches.
    public List getTopicsList(Element root, String categoryName){
    	//Getting NodeList of all categories
    	NodeList catNodeList = root.getElementsByTagName("area");
    	
    	//Storing string values of categories
    	List <String> topicNames = new LinkedList<String>();
    	
    	//Node to store chosen category
    	Element chosenCategory = null;
    	
    	//Iterating through catNodeList to find matching categoryName.
    	for(int i = 0;i < catNodeList.getLength();i++){
    		Element categoryElement = (Element)catNodeList.item(i);
    		
    		String catName = getElementValue(categoryElement, "areaName");
    		
    		//If category name is equal to string given, get current category and move down the DOM.
    		if(categoryName.compareTo(catName) == 0){
    			chosenCategory = (Element)catNodeList.item(i);
    			break;
    		}
    	}
    	
    	//Creating topic NodeList from chosen category.
    	NodeList topicList = chosenCategory.getElementsByTagName("topic");
    	
    	
    	//Moving category names from XML to LinkedList
    	for(int i = 0;i < topicList.getLength();i++){
    		//Cast each topicList item into element.
    		Element topicElement = (Element)topicList.item(i);
    		
    		//Getting string value of category and adding to list.
    		topicNames.add(getElementValue(topicElement, "topicName"));
    		
    	}
    	
    	return topicNames;
    }
    
    //Function to parse XML file
    public Document parseFile(){
    	
        //Parsing problemList.xml 
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        
        //Try/catch block for document building
        try {
			DocumentBuilder builder = factory.newDocumentBuilder();
			
			//Try/catch block for parsing
			try {
				//Creating file
				URL url = new URL("http://swillis16.hostzi.com/problemList.xml");
	            InputStream stream = url.openStream();
				
				//Creating document to be returned
		    	Document doc = builder.parse(stream);
		    	return doc;
				
			} catch (SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}
        
        return null;
    }
    
  //Function to get text value if XML element exists.
    public String getElementValue(Element el, String tagName){
    	String textValue = null;
    	
    	NodeList nl =  el.getElementsByTagName(tagName);
    	
    	
    	if(nl != null && nl.getLength() > 0) {
			Node eleNode = nl.item(0);
			textValue = eleNode.getFirstChild().getNodeValue();
		}
    	
    	return textValue;
    	
    }

}
